---
title: "지도의 종류"
author: Sang-Il Lee
date-modified: last-modified
number-sections: true
format: 
  html: 
    toc: true
code-link: true
code-copy: true
execute: 
  warning: false
  error: false
  freeze: auto
editor: visual
editor_options: 
  chunk_output_type: console
---

## 심상지도와 물리적 지도

## 일반도와 주제도

### 일반도

### 주제도

#### 전형적인 주제도

-   필수적인 패키지 불러오기

```{r}
library(tidyverse) 
library(readxl) 
library(sf) 
library(tmap) 
library(tmaptools)
library(rayshader)
library(pals) 
```

-   지리공간데이터 불러오기

```{r}
seoul_EMD <- st_read(
  "D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2021_4Q/SEOUL_EMD_2021_4Q.shp", options = "ENCODING=CP949"
  ) 
seoul_EMD_2020 <- st_read(
  "D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2020_2Q/SEOUL_EMD_2020_2Q.shp", options = "ENCODING=CP949"
  ) 
seoul_gu <- st_read(
  "D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2021_4Q/SEOUL_GU_2021_4Q.shp", options = "ENCODING=CP949"
  ) 
seoul_sido <- st_read(
  "D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2021_4Q/SEOUL_SIDO_2021_4Q.shp", options = "ENCODING=CP949"
  )
```

-   지도 확인

```{r}
qtm(seoul_EMD_2020)
```

-   1인가구 속성 데이터 불러오기

```{r}
house_SDGGEMD_2020 <- read_excel(
  "D:/My R/Population Geography/3 Population Structure/Housing_Size_2020_Adj.xlsx", sheet = 1
  )
glimpse(house_SDGGEMD_2020)
```

-   결합하기

```{r}
seoul_EMD_2020 <- seoul_EMD_2020 |> 
  mutate(
    EMD_ID = as.numeric(EMD_ID)
  )
my_df <-seoul_EMD_2020 |> 
  left_join(
    house_SDGGEMD_2020, join_by(EMD_ID == Code)
  )
```

-   전형적인 주제도 제작

```{r}

min_max <- my_df |> 
  st_drop_geometry() |> 
  summarize(
    min_value = format(round(min(House1_p, na.rm = TRUE), 
                             digits = 1), nsmall = 1),
    max_value = format(round(max(House1_p, na.rm = TRUE), 
                             digits = 1), nsmall = 1)
  )
min.val <- min_max[[1]]
max.val <- min_max[[2]]

my_map <- tm_shape(my_df) +
  tm_polygons(
    "House1_p",
    style = "fixed", 
    palette = "BuPu", 
    border.col = "gray40", 
    lwd = 0.25, 
    border.alpha = 1, 
    breaks = c(-Inf, 15, 25, 35, 45, 55, 65, Inf),
    labels = c(paste0("< 15", " (Min. ", min.val, ")"), 
               "15 ~ 25", "25 ~ 35", "35 ~ 45", "45 ~ 55", 
               "55 ~ 65", paste0(">= 65", " (Max. ", max.val, ")")), 
    title = "One-Person (%)", 
    legend.hist = FALSE, 
    legend.show = TRUE) +
  tm_shape(seoul_gu) + 
  tm_polygons(alpha = 0, border.col = "gray20", lwd = 0.75) +
  tm_legend(
    legend.format = list(digits = 1), 
    legend.title.size = 0.6, 
    legend.text.size = 0.45,
    legend.position = c(0.85, 0.05)) +
  tm_layout(
    frame = TRUE, 
    title = "One-Person Households in Seoul, 2020", 
    title.position = c("center", "top"), 
    title.size = 0.9,
    bg.color = "white",
    inner.margins = c(0.05, 0.05, 0.08, 0.12)) +
  tm_scale_bar(
    color.dark = "gray60",
    text.size = 0.25,
    breaks = seq(0, 10, 2),
    position = c(0.03, 0.01)) + 
  tm_credits(
    "SANG-IL LEE, Geograhy Education at SNU, 2024", 
    size = 0.3, position = c(0.78, 0.01)
    )

my_map
```

-   저장

```{r}
#| echo: false
my_title <- "3_3_1"
my.path.name <- "outputs/"
my.file.name <- paste0(my.path.name, my_title, ".png")
tmap_save(
  my_map, 
  filename = my.file.name, 
  width = 5.75, 
  dpi = 1200)
```

### 일반도-주제도 연속체

#### 피처맵

-   지도 제작

```{r}
my_map <- my_df |> 
  tm_shape() +
  tm_borders(col = "gray20", lwd = 0.75)
my_map
```

-   저장

```{r}
#| echo: false
my_title <- "3_3_2_01"
my.path.name <- "outputs/"
my.file.name <- paste0(my.path.name, my_title, ".png")
tmap_save(
  my_map, 
  filename = my.file.name, 
  width = 5.75, 
  dpi = 1200)
```

#### 사건 분포도

-   사망 교통사고 데이터 불러오기

```{r}
accident <- st_read("D:/My R/Vector Data Manipulation Korea/Public_Data_Portal/accident_seoul_2022.shp")
```

-   지도 제작

```{r}
my_map <- my_df |> 
  tm_shape() + 
  tm_borders(col = "gray20", lwd = 0.75) +
  tm_shape(accident) + tm_dots(size = 0.15)
my_map
```

-   저장

```{r}
#| echo: false
my_title <- "3_3_2_02"
my.path.name <- "outputs/"
my.file.name <- paste0(my.path.name, my_title, ".png")
tmap_save(
  my_map, 
  filename = my.file.name, 
  width = 5.75, 
  dpi = 1200)
```

#### 정성적 주제도

-   지도 제작

```{r}
my_map <- my_df |> 
  tm_shape() + 
  tm_polygons(
    col = "SGG1_NM",
    border.col = "gray20", lwd = 0.75, 
    palette = pals::alphabet2(),
    legend.show = FALSE
    )
my_map
```

-   저장

```{r}
#| echo: false
my_title <- "3_3_2_03"
my.path.name <- "outputs/"
my.file.name <- paste0(my.path.name, my_title, ".png")
tmap_save(
  my_map, 
  filename = my.file.name, 
  width = 5.75, 
  dpi = 1200)
```

#### 정량적 주제도

-   지도 제작

```{r}
my_map <- my_df |> 
  tm_shape() + 
  tm_polygons(
    col = "House1_p",
    breaks = c(-Inf, 15, 25, 35, 45, 55, 65, Inf),
    palette = "Oranges",
    border.col = "gray20", lwd = 0.75, 
    legend.show = FALSE
    )
my_map
```

-   저장

```{r}
#| echo: false
my_title <- "3_3_2_04"
my.path.name <- "outputs/"
my.file.name <- paste0(my.path.name, my_title, ".png")
tmap_save(
  my_map, 
  filename = my.file.name, 
  width = 5.75, 
  dpi = 1200)
```

## 정성적 주제도와 정량적 주제도

### 정량적 주제도

#### 서울의 인구분포 사례

-   인구수 속성 데이터 불러오기

```{r}
pop_SDGGEMD_2020 <- read_excel(
  "D:/My R/Korea Census Data Manipulation/1 Population Basic/DM_ADJ_Census_2020.xlsx", sheet = 1
  )
```

-   결합하기: 위와 구분하기 위해 `my_df_2`라고 지정

```{r}
my_df_2 <-seoul_EMD_2020 |> 
  left_join(
    pop_SDGGEMD_2020, join_by(EMD_ID == Code)
  )
```

-   인구밀도 계산

```{r}
#| output: false
my_df_2$area <- st_area(my_df_2) / 1000000
my_df_2 <- my_df_2 |> 
  mutate(
    pop_den_t = pop_t / area
  )
```

#### 도형표현도

-   지도 제작

```{r}
my_map <- tm_shape(my_df_2) + 
  tm_borders(col = "gray10", lwd = 0.25) +
  tm_shape(seoul_gu) + tm_borders(col = "gray10", lwd = 0.75) +
  tm_shape(my_df_2) + 
  tm_symbols(size = "pop_t", scale = 1.5, alpha = 0.75, 
             col = "#a63603",border.lwd = 0, 
             legend.size.show = FALSE) +
  tm_scale_bar(
    color.dark = "gray60",
    text.size = 0.25,
    breaks = seq(0, 10, 2),
    position = c(0.03, 0.01)) + 
  tm_credits(
    "SANG-IL LEE, Geograhy Education at SNU, 2024", 
    size = 0.3, position = c(0.78, 0.01)
    )
my_map
```

-   저장

```{r}
#| echo: false
my_title <- "3_3_3_01"
my.path.name <- "outputs/"
my.file.name <- paste0(my.path.name, my_title, ".png")
tmap_save(
  my_map, 
  filename = my.file.name, 
  width = 5.75, 
  dpi = 1200)
```

#### 점밀도도

-   포인트 생성: 시간이 조금 걸리므로 따로 실행

```{r}
my_seoul_point <- my_df_2 |> 
  st_sample(size = round(my_df_2$pop_t/500), 
            type = "random", exact = TRUE) |> 
  st_sf()
```

-   지도 제작

```{r}
my_map <- tm_shape(my_df_2) + 
  tm_borders(col = "gray10", lwd = 0.25) +
  tm_shape(my_seoul_point) + 
  tm_dots(size = 0.005, alpha = 0.75, col = "#a63603") +
  tm_shape(seoul_gu) + tm_borders(col = "gray10", lwd = 0.75) +
  tm_scale_bar(
    color.dark = "gray60",
    text.size = 0.25,
    breaks = seq(0, 10, 2),
    position = c(0.03, 0.01)) + 
  tm_credits(
    "SANG-IL LEE, Geograhy Education at SNU, 2024", 
    size = 0.3, position = c(0.78, 0.01)
    )
my_map
```

-   저장

```{r}
#| echo: false
my_title <- "3_3_3_02"
my.path.name <- "outputs/"
my.file.name <- paste0(my.path.name, my_title, ".png")
tmap_save(
  my_map, 
  filename = my.file.name, 
  width = 5.75, 
  dpi = 1200)
```

#### 단계구분도

-   지도 제작

```{r}
my_map <- tm_shape(my_df_2) +
  tm_polygons(
    "pop_den_t",
    style = "fixed", 
    palette = "Oranges", 
    border.col = "gray40", 
    lwd = 0.25, 
    border.alpha = 1, 
    breaks = c(-Inf, 10000, 15000, 20000, 25000, 30000, 40000, Inf),
    legend.show = FALSE) +
  tm_shape(seoul_gu) + 
  tm_polygons(alpha = 0, border.col = "gray20", lwd = 0.75) +
  tm_scale_bar(
    color.dark = "gray60",
    text.size = 0.25,
    breaks = seq(0, 10, 2),
    position = c(0.03, 0.01)) + 
  tm_credits(
    "SANG-IL LEE, Geograhy Education at SNU, 2024", 
    size = 0.3, position = c(0.78, 0.01)
    )
my_map
```

-   저장

```{r}
#| echo: false
my_title <- "3_3_3_03"
my.path.name <- "outputs/"
my.file.name <- paste0(my.path.name, my_title, ".png")
tmap_save(
  my_map, 
  filename = my.file.name, 
  width = 5.75, 
  dpi = 1200)
```

#### 등치선도

-   준비 과정

```{r}

# sp로 만들기
library(sp)
my_centroid <- st_centroid(my_df_2)
my_centroid_sp <- as(my_centroid, "Spatial")
my_df_2_sp <- as(my_df_2, "Spatial")
my_seoul <- st_union(seoul_gu)
my_seoul_sp <- as(my_seoul, "Spatial")

# 인터폴레이션을 위한 바탕 래스터 만들고 정의하기 
library(terra)
grd <- as.data.frame(spsample(my_seoul_sp, "regular", n = 100000))
names(grd) <- c("X", "Y")
coordinates(grd) <- c("X", "Y")
gridded(grd) <- TRUE
fullgrid(grd) <- TRUE
crs(grd) <- crs(my_centroid_sp)

# TPS (thin plate spline) 방식의 인터폴레이션 실행 및 등치선 생성
library(fields)
library(raster)
m <- Tps(coordinates(my_centroid_sp), my_centroid_sp$pop_den_t)
tps <- interpolate(raster(grd), m)
tps <- mask(tps, my_seoul_sp)
crs(tps) <- CRS('+init=EPSG:5179') # 힘들었음. st_crs()는 먹지 않음.
cont.tps <- rasterToContour(tps)
```

-   지도 제작

```{r}
my_map <- tm_shape(seoul_gu) +
  tm_borders() + 
  tm_shape(tps) + 
  tm_raster(
    style = "fixed", 
    breaks = c(-Inf, 10000, 15000, 20000, 25000, 30000, 40000, Inf),     palette = "Oranges", legend.show = FALSE) +
  tm_shape(subset(
    cont.tps, 
    level %in% c(10000, 15000, 20000, 25000, 30000, 40000))) +  
  tm_iso(
      text = "level", 
      color = "black", 
      lwd = 0.5, 
      size = 0.5, 
      alpha = 0.7) +
  tm_shape(seoul_gu) + 
  tm_polygons(alpha = 0, border.col = "gray20", lwd = 0.75) +
  tm_scale_bar(
    color.dark = "gray60",
    text.size = 0.25,
    breaks = seq(0, 10, 2),
    position = c(0.03, 0.01)) + 
  tm_credits(
    "SANG-IL LEE, Geograhy Education at SNU, 2024", 
    size = 0.3, position = c(0.78, 0.01)
    )
my_map
```

-   저장

```{r}
#| echo: false
my_title <- "3_3_3_04"
my.path.name <- "outputs/"
my.file.name <- paste0(my.path.name, my_title, ".png")
tmap_save(
  my_map, 
  filename = my.file.name, 
  width = 5.75, 
  dpi = 1200)
```

## 단변량 주제도와 다변량 주제도

## 대축척 주제도와 소축척 주제도
