{
  "hash": "b52fea70b17b40e44240ec3f8eae75c1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"좌표계\"\nauthor: Sang-Il Lee\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\n---\n\n\n## 좌표계의 정의와 기본 좌표계\n\n### 좌표계의 정의\n\n### 기본 좌표계\n\n### 지도 투영을 위한 좌표계\n\n## 구체 혹은 타원체 좌표계\n\n### 지리좌표계\n\n\n{{< video https://www.youtube.com/watch?v=g52A2CPEi4A&t=1s >}}\n\n\n\n### 측지좌표계\n\n### 지심좌표계\n\n### 좌표변환\n\n## 평면 직각 좌표계\n\n### 개념 규정\n\n### 구성 요소\n\n### 종류\n\n### UTM 좌표계\n\n#### UTM 좌표계의 개요\n\n![https://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system](images/clipboard-1968212367.png)\n\n![](images/clipboard-3549641415.png)\n\n![](images/clipboard-3041164177.png){fig-align=\"center\"}\n\n#### UTM 좌표계와 우리나라\n\n우선 우리나라가 포함된 UTM 그리드(51T, 52T, 51S, 52S)에 대한 개관도를 작성한다.\n\n-   필수 패키지 불러오기\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) \nlibrary(rnaturalearth)\nlibrary(sf) \nlibrary(tmap) \nlibrary(tmaptools)\n```\n:::\n\n\n-   지리공간데이터 불러와 정리하기\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <- ne_download(scale = 50, type = \"countries\", category = \"cultural\") |> \n  st_as_sf()\nutm_grid <- st_read(\n  \"D:/My R/World Data Manupulation/World UTM Grid/World_UTM_Grid.shp\", options = \"ENCODING=CP949\"\n  )\n\n# utm_grid의 재투영\nutm_grid <- utm_grid |> \n  st_transform(crs = st_crs(countries))\n\n# UTM 이름 재정의\nutm_grid <- utm_grid |> \n  mutate(\n    utm_name = str_c(ZONE, ROW_)\n  ) |> \n  relocate(\n    utm_name\n  )\n```\n:::\n\n\n-   지도 제작 및 저장\n\n\n::: {.cell}\n\n```{.r .cell-code}\nutm_grid_korea <- utm_grid |> \n  filter(\n    utm_name %in% c(\"51T\", \"52T\", \"51S\", \"52S\")\n  ) |> \n  st_transform(crs = st_crs(countries))\n\nutm_bound <- c(81, -4, 171, 60)\nmy_map <- tm_shape(utm_grid_korea, bbox = utm_bound) + tm_fill(col = \"gray80\", lwd = 1, border.col = \"black\") + \n  tm_shape(countries) + tm_borders(col = \"gray50\", lwd = 0.75) +\n  tm_shape(utm_grid) + tm_borders(col = \"black\", lwd = 1) + \n  tm_text(text = \"utm_name\", size = 0.7, col = \"gray20\") +\n  tm_graticules(x = seq(84, 168, 6), y = seq(0, 56, 8), lwd = 0, labels.size = 0.5)\nmy_map\n```\n\n::: {.cell-output-display}\n![](06_coordinate_system_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nasp_r <- get_asp_ratio(my_map)\nmy.file.name <- paste0(\"outputs/6_2_1.png\") \ntmap_save(my_map, filename = my.file.name, width = 5.75, dpi = 600)\n```\n:::\n\n\n다음으로 서울이 포함된 북반구 52구역에 대한 투영을 실행한다. [epsg.io](https://epsg.io/)의 검색 결과 EPSG:32652임을 확인한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# N52를 중심으로 한 대략적인 지역 선정\nbb_utm_52 <- tibble(x = c(81, 81, 171, 171), y = c(-4, 60, -4, 60)) |> \n  st_as_sf(coords = c(\"x\", \"y\"), crs = 4326) |> \n  st_bbox() |> \n  st_as_sfc()\n\n# 국가 셰이프 파일에서 해당 부분만 골라내기\ncountries_bb <- st_intersection(countries, bb_utm_52) |> \n  st_make_valid()\n\n# UTM N52의 투영법 적용(EPSG:32652)\ncountries_bb_utm <- st_transform(countries_bb, crs = 32652)\n\n# UTM N52의 가상원점 지정\norigin_n52 <- st_as_sf(tibble(x = 0, y = 0), coords = c(\"x\", \"y\"), crs = 32652) |> \n  st_transform(crs = st_crs(countries))\n\n# 서울 지점 셰이프 만들기\nseoul_point <- st_as_sf(tibble(x = 126.9352778, y = 37.5700057), coords = c(\"x\", \"y\"), crs = 4326)\n\n# 그리드 생성 영역을 지정하고 그리드 생성\nbb_n52 <- tibble(x = c(0, 1000000), y = c(-1000000, 7000000)) |> \n  st_as_sf(coords = c(\"x\", \"y\"), crs = 32652) |> \n  st_bbox() |> \n  st_as_sfc()\n\nbb_n52_grid <- st_make_grid(bb_n52, 100000)\n\n# 지도 표현 영역 지정\nbb <- c(-3000000, -500000, 3500000, 6000000)\nmy_map <- tm_shape(countries_bb_utm, bbox = bb) + tm_fill() +\n  tm_graticules(x = seq(84, 172, 6), y = seq(0, 40, 10), lwd = 1.5) +\n  tm_shape(bb_n52_grid) + tm_borders(lwd = 0.5) +\n  tm_shape(origin_n52) + tm_symbols(col = \"red\", size = 0.5) +\n  tm_shape(seoul_point) + tm_symbols(col = \"black\", size = 0.2)\nmy_map\n```\n\n::: {.cell-output-display}\n![](06_coordinate_system_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmy.file.name <- paste0(\"outputs/6_2_2.png\") \ntmap_save(my_map, filename = my.file.name,  width = 5.75, dpi = 600)\n```\n:::\n\n\n### IMW 좌표계\n\n#### IMW 좌표계의 개요\n\n![](images/clipboard-1429117803.png)\n\n![](images/clipboard-2189884571.png)\n\n![](images/clipboard-2103062673.png)\n\n![](images/clipboard-911190881.png)\n\n#### IMW 좌표계와 우리나라\n\n우리나라와 그 주변에 대해 IWM 구역 체계를 보여주는 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# IMW 그리드 파일을 불러온다.\nimw_grid <- st_read(\n  \"imw_grid.shp\", options = \"ENCODING=CP949\") |> \n  st_transform(crs = st_crs(countries))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\noptions:        ENCODING=CP949 \nReading layer `imw_grid' from data source `D:\\R_Books\\Cartography\\imw_grid.shp' using driver `ESRI Shapefile'\nSimple feature collection with 2132 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -180 ymin: -90 xmax: 180 ymax: 90\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nimw_bd <- c(88, 20, 164, 60)\nmy_map <- tm_shape(countries, bbox = imw_bd) + tm_fill() +\n  tm_shape(imw_grid) + tm_borders() +\n  tm_text(\"imw_id\", size = 0.5) +\n  tm_graticules(x = seq(90, 162, 6), y = seq(20, 60, 4))\nmy_map\n```\n\n::: {.cell-output-display}\n![](06_coordinate_system_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmy.file.name <- paste0(\"outputs/6_2_3.png\") \ntmap_save(my_map, filename = my.file.name,  width = 5.75, dpi = 600)\n```\n:::\n\n\n우리나라에 해당하는 IWM 구역과 1:250,000 지세도를 그린다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# IWM 중 NJ51, NJ52, NI51, NI52만 고르기\nimw_kr_south <- imw_grid |> \n  filter(\n    imw_id %in% c(\"NJ51\", \"NJ52\", \"NI51\", \"NI52\")\n  )\n\ntm_shape(imw_kr_south, projection = 5178) + tm_borders()\n```\n\n::: {.cell-output-display}\n![](06_coordinate_system_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 시도 행정구역 지도를 불러옴\nsido <- st_read(\n  \"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/3 Generalization/2021_4Q/NOT_MOVE/SIDO_NM_2021_4Q_GEN_0040.shp\", options = \"ENCODING=CP949\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\noptions:        ENCODING=CP949 \nReading layer `SIDO_NM_2021_4Q_GEN_0040' from data source \n  `D:\\My R\\Korean Administrative Areas\\행정구역 셰이프 파일\\3 Generalization\\2021_4Q\\NOT_MOVE\\SIDO_NM_2021_4Q_GEN_0040.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 17 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 746255.1 ymin: 1464095 xmax: 1387941 ymax: 2068161\nProjected CRS: KGD2002 / Unified CS\n```\n\n\n:::\n\n```{.r .cell-code}\n# 지형도 인덱스: 국토지리정보원에서 다운받은 것: 누락된 것이 있음.\ntopo_25 <- st_read(\n  \"D:/My R/Vector Data Manipulation Korea/Korea_Topo_Index/INDEX/TN_MAPINDX_25K.gpkg\", options = \"ENCODING=CP949\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\noptions:        ENCODING=CP949 \nReading layer `TN_MAPINDX_25K' from data source \n  `D:\\My R\\Vector Data Manipulation Korea\\Korea_Topo_Index\\INDEX\\TN_MAPINDX_25K.gpkg' \n  using driver `GPKG'\nSimple feature collection with 924 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 769102.8 ymin: 1448883 xmax: 1388735 ymax: 2056078\nProjected CRS: KGD2002 / Unified CS\n```\n\n\n:::\n\n```{.r .cell-code}\ntopo_50 <- st_read(\n  \"D:/My R/Vector Data Manipulation Korea/Korea_Topo_Index/INDEX/TN_MAPINDX_50K.gpkg\", options = \"ENCODING=CP949\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\noptions:        ENCODING=CP949 \nReading layer `TN_MAPINDX_50K' from data source \n  `D:\\My R\\Vector Data Manipulation Korea\\Korea_Topo_Index\\INDEX\\TN_MAPINDX_50K.gpkg' \n  using driver `GPKG'\nSimple feature collection with 263 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 769102.8 ymin: 1434898 xmax: 1400507 ymax: 2056219\nProjected CRS: KGD2002 / Unified CS\n```\n\n\n:::\n\n```{.r .cell-code}\ntopo_250 <- st_read(\n  \"D:/My R/Vector Data Manipulation Korea/Korea_Topo_Index/INDEX/TN_MAPINDX_250K.gpkg\", options = \"ENCODING=CP949\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\noptions:        ENCODING=CP949 \nReading layer `TN_MAPINDX_250K' from data source \n  `D:\\My R\\Vector Data Manipulation Korea\\Korea_Topo_Index\\INDEX\\TN_MAPINDX_250K.gpkg' \n  using driver `GPKG'\nSimple feature collection with 26 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 676706.7 ymin: 1445472 xmax: 1400507 ymax: 2564834\nProjected CRS: KGD2002 / Unified CS\n```\n\n\n:::\n\n```{.r .cell-code}\n# 지형도 인덱스: 대헌에게서 받은 것: 옛날 것임\ntopo_25 <- st_read(\n  \"D:/My R/Vector Data Manipulation Korea/Korea_Topo_Index_Daeheon/c25000.shp\", options = \"ENCODING=CP949\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\noptions:        ENCODING=CP949 \nReading layer `c25000' from data source \n  `D:\\My R\\Vector Data Manipulation Korea\\Korea_Topo_Index_Daeheon\\c25000.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 833 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -9583.397 ymin: -40809.11 xmax: 632434.7 ymax: 570432.3\nProjected CRS: KGD2002_Central_Belt\n```\n\n\n:::\n\n```{.r .cell-code}\ntopo_50 <- st_read(\n  \"D:/My R/Vector Data Manipulation Korea/Korea_Topo_Index_Daeheon/c50000.shp\", options = \"ENCODING=CP949\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\noptions:        ENCODING=CP949 \nReading layer `c50000' from data source \n  `D:\\My R\\Vector Data Manipulation Korea\\Korea_Topo_Index_Daeheon\\c50000.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 245 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -20570.52 ymin: -38053.73 xmax: 633222.6 ymax: 584308.1\nProjected CRS: KGD2002_Central_Belt\n```\n\n\n:::\n\n```{.r .cell-code}\ntopo_25 <- topo_25 |> \n  st_transform(crs = st_crs(sido))\ntopo_50 <- topo_50 |> \n  st_transform(crs = st_crs(sido))\ntopo_250 <- topo_250 |> \n  st_transform(crs = st_crs(sido))\n\n# 1:250,000 지세도 도엽 중 남한에 해당하는 것만 고르기\ntopo_250_south <- topo_250 |> \n  filter(\n    !MAPID_NM %in% c(\"회령\", \"나진\", \"만포진\", \"청진\", \"신의주\", \"장진\", \"성진\", \"평양\", \"함흥\")\n  )\n\n# 지도 제작\nbb <- c(265000, 1300000, 1450000, 2275000)\nmy_map <- tm_shape(topo_250_south, bbox = bb) + tm_borders() +\n  tm_shape(sido) + tm_fill(col = \"gray75\") +\n  tm_graticules(x = c(120, 126, 132), y = c(32, 36, 40)) +\n  tm_shape(topo_250_south) + tm_borders(lwd = 1.5, col = \"gray15\") + \n  tm_text(\"MAPID_NO\", size = 0.75) +\n  tm_credits(\"NJ51\", size = 1, position = c(0.125, 0.85)) +\n  tm_credits(\"NI51\", size = 1, position = c(0.075, 0.1)) +\n  tm_credits(\"NJ52\", size = 1, position = c(0.81, 0.84)) +\n  tm_credits(\"NI52\", size = 1, position = c(0.84, 0.08))\nmy_map\n```\n\n::: {.cell-output-display}\n![](06_coordinate_system_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n```{.r .cell-code}\nmy.file.name <- paste0(\"outputs/6_2_4.png\") \ntmap_save(my_map, filename = my.file.name,  width = 5.75, dpi = 600)\n```\n:::\n\n\n1:250,000, 1:50,000, 1:25,000의 인덱싱 시스템을 보여주는 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 경주와 대보만 추출함\n\ngyeongju <- topo_50 |> \n  filter(\n    MAP_NAM == \"경주\"\n  )\ndaebo <- topo_25 |> \n  filter(\n    MAP_NAM == \"대보\"\n  )\n\n# 지도 제작\nbb <- c(620000, 1440000, 1300000, 1900000)\nmy_map <- tm_shape(topo_50, bbox = bb) + tm_fill() + tm_borders() +\n  tm_shape(sido) + tm_borders(col = \"gray10\", lwd = 0.5) +\n  tm_shape(gyeongju) + tm_fill(col = \"gray50\") +\n  tm_shape(daebo) + tm_fill(col = \"gray50\") +\n  tm_graticules(lwd = 0.5, x = seq(124, 130, 1)) +\n  tm_shape(topo_250_south) + tm_borders(lwd = 1.5, col = \"gray15\") + \n  tm_text(\"MAPID_NO\", size = 1.25)\nmy_map\n```\n\n::: {.cell-output-display}\n![](06_coordinate_system_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmy.file.name <- paste0(\"outputs/6_2_5.png\") \ntmap_save(my_map, filename = my.file.name,  width = 5.75, dpi = 600)\n```\n:::\n\n\n### 우리나라 TM 좌표계\n\n우리나라의 TM 좌표계 지도를 제작한다.\n\n-   지리공간데이터 불러와 정리하기\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntopo_250 |> \n  st_transform(topo_250, crs = st_crs(sido))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 26 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 676706.7 ymin: 1445472 xmax: 1400507 ymax: 2564834\nProjected CRS: KGD2002 / Unified CS\nFirst 10 features:\n     MAPID_NM MAPID_NO                           geom\n1        평양   NJ51-3 POLYGON ((700120.1 2200056,...\n2      진남포   NJ51-6 POLYGON ((695823.9 2089039,...\n3      대연평   NJ51-9 POLYGON ((691620.7 1978033,...\n4  격렬비열도  NJ51-12 POLYGON ((687511.5 1867041,...\n5        부남   NI51-3 POLYGON ((683497.8 1756060,...\n6      흑산도   NI51-6 POLYGON ((679580.5 1645087,...\n7        회령   NK52-5 POLYGON ((1040919 2527360, ...\n8        청진   NK52-8 POLYGON ((1041571 2416325, ...\n9        성진  NK52-11 POLYGON ((1042209 2305311, ...\n10       속초   NJ52-5 POLYGON ((1043448 2083338, ...\n```\n\n\n:::\n\n```{.r .cell-code}\n# 투영 원점의 셰이프 파일 생성\norigins_df <- tibble(x = c(125, 127, 129, 131), y = c(38, 38, 38, 38))\norigins <- st_as_sf(origins_df, coords = c(\"x\", \"y\"), crs = 4326) \norigins <- st_transform(origins, crs = st_crs(sido))\n\n# 개별 투영대의 평면 직각 좌표계 원점 셰이프 파일 생성: 개별 투영법에 의거 \norigin_west <- st_as_sf(tibble(x = 0, y = 0), coords = c(\"x\", \"y\"), crs = 5185) |> \n  st_transform(origin_west, crs = st_crs(sido))\norigin_mid <- st_as_sf(tibble(x = 0, y = 0), coords = c(\"x\", \"y\"), crs = 5186) |> \n  st_transform(origin_mid, crs = st_crs(sido))\norigin_east <- st_as_sf(tibble(x = 0, y = 0), coords = c(\"x\", \"y\"), crs = 5187) |> \n  st_transform(origin_east, crs = st_crs(sido))\norigin_sea <- st_as_sf(tibble(x = 0, y = 0), coords = c(\"x\", \"y\"), crs = 5188) |> \n  st_transform(origin_sea, crs = st_crs(sido))\n```\n:::\n\n\n중부 투영대의 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbb_mid <- tibble(x = c(-100000, 720000), y = c(-40000, 720000)) |> \n  st_as_sf(coords = c(\"x\", \"y\"), crs = 5186) |> \n  st_bbox() |> \n  st_as_sfc()\n\nbb_mid_grid <- st_make_grid(bb_mid, 20000)\n\nmy_map <- tm_shape(bb_mid_grid) + tm_borders(lty = \"dotted\", lwd = 0.5) +\n  tm_shape(sido) + tm_fill(col = \"gray75\") +\n  tm_graticules(x = c(123:132), lwd = 1.5) +\n  tm_shape(bb_mid_grid) + tm_borders(lty = \"dotted\", lwd = 0.5) +\n  tm_shape(topo_50) + tm_borders(col = \"black\", lwd = 1.25) +\n  tm_shape(origins) + tm_symbols(col = \"black\", size = 0.5) +\n  tm_shape(origin_mid) + tm_symbols(col = \"red\", size = 0.5)\nmy_map\n```\n\n::: {.cell-output-display}\n![](06_coordinate_system_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmy.file.name <- paste0(\"outputs/6_2_6.png\") \ntmap_save(my_map, filename = my.file.name,  width = 5.75, dpi = 600)\n```\n:::\n\n\n동부 투영대의 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbb_east <- tibble(x = c(-300000, 520000), y = c(-40000, 720000)) |> \n  st_as_sf(coords = c(\"x\", \"y\"), crs = 5187) |> \n  st_bbox() |> \n  st_as_sfc()\n\nbb_east_grid <- st_make_grid(bb_east, 20000)\n\nmy_map <- tm_shape(bb_east_grid) + tm_borders(lty = \"dotted\", lwd = 0.5) +\n  tm_shape(sido) + tm_fill(col = \"gray75\") +\n  tm_graticules(x = c(123:132), lwd = 1.5) +\n  tm_shape(bb_east_grid) + tm_borders(lty = \"dotted\", lwd = 0.5) +\n  tm_shape(gyeongju) + tm_fill(col = \"gray50\") +\n  tm_shape(topo_50) + tm_borders(col = \"black\", lwd = 1.25) +\n  tm_shape(origins) + tm_symbols(col = \"black\", size = 0.5) +\n  tm_shape(origin_east) + tm_symbols(col = \"red\", size = 0.5)\nmy_map\n```\n\n::: {.cell-output-display}\n![](06_coordinate_system_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmy.file.name <- paste0(\"outputs/6_2_7.png\") \ntmap_save(my_map, filename = my.file.name,  width = 5.75, dpi = 600)\n```\n:::\n\n\n동해 투영대의 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbb_sea <- tibble(x = c(-500000, 320000), y = c(-40000, 720000)) |> \n  st_as_sf(coords = c(\"x\", \"y\"), crs = 5188) |> \n  st_bbox() |> \n  st_as_sfc()\n\nbb_sea_grid <- st_make_grid(bb_sea, 20000)\n\nmy_map <- tm_shape(bb_sea_grid) + tm_borders(lty = \"dotted\", lwd = 0.5) +\n  tm_shape(sido) + tm_fill(col = \"gray75\") +\n  tm_graticules(x = c(123:132), lwd = 1.5) +\n  tm_shape(topo_50) + tm_borders(col = \"black\", lwd = 1.25) +\n  tm_shape(origins) + tm_symbols(col = \"black\", size = 0.5) +\n  tm_shape(origin_sea) + tm_symbols(col = \"red\", size = 0.5)\nmy_map\n```\n\n::: {.cell-output-display}\n![](06_coordinate_system_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmy.file.name <- paste0(\"outputs/6_2_8.png\") \ntmap_save(my_map, filename = my.file.name,  width = 5.75, dpi = 600)\n```\n:::\n\n\n서부 투영대의 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbb_west <- tibble(x = c(100000, 920000), y = c(-40000, 720000)) |> \n  st_as_sf(coords = c(\"x\", \"y\"), crs = 5185) |> \n  st_bbox() |> \n  st_as_sfc()\n\nbb_west_grid <- st_make_grid(bb_west, 20000)\n\nmy_map <- tm_shape(bb_west_grid) + tm_borders(lty = \"dotted\", lwd = 0.5) +\n  tm_shape(sido) + tm_fill(col = \"gray75\") +\n  tm_graticules(x = c(123:132), lwd = 1.5) +\n  tm_shape(topo_50) + tm_borders(col = \"black\", lwd = 1.25) +\n  tm_shape(origins) + tm_symbols(col = \"black\", size = 0.5) +\n  tm_shape(origin_west) + tm_symbols(col = \"red\", size = 0.5)\nmy_map\n```\n\n::: {.cell-output-display}\n![](06_coordinate_system_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmy.file.name <- paste0(\"outputs/6_2_9.png\") \ntmap_save(my_map, filename = my.file.name,  width = 5.75, dpi = 600)\n```\n:::\n\n\n중간 시험 문제(중부 투영대) 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 춘천, 속초, 강릉만 추출함\nchuncheon <- topo_50 |> \n  filter(\n    MAP_NAM == \"춘천\"\n  )\nsokcho <- topo_50 |> \n  filter(\n    MAP_NAM == \"속초\"\n  )\ngangreung <- topo_25 |> \n  filter(\n    MAP_NAM == \"강릉\"\n  )\n\nbb_mid <- tibble(x = c(-100000, 720000), y = c(-40000, 720000)) |> \n  st_as_sf(coords = c(\"x\", \"y\"), crs = 5186) |> \n  st_bbox() |> \n  st_as_sfc()\n\nbb_mid_grid <- st_make_grid(bb_mid, 20000)\n\nmy_map <- tm_shape(bb_mid_grid) + tm_borders(lty = \"dotted\", lwd = 0.5) +\n  tm_shape(sido) + tm_fill(col = \"gray75\") +\n  tm_graticules(x = c(123:132), lwd = 1.5) +\n  tm_shape(bb_mid_grid) + tm_borders(lty = \"dotted\", lwd = 0.5) +\n  tm_shape(chuncheon) + tm_fill(col = \"gray50\") +\n  tm_shape(sokcho) + tm_fill(col = \"gray50\") +\n  tm_shape(gangreung) + tm_fill(col = \"gray50\") +\n  tm_shape(topo_50) + tm_borders(col = \"black\", lwd = 1.25) +\n  tm_shape(origins) + tm_symbols(col = \"black\", size = 0.5) +\n  tm_shape(origin_mid) + tm_symbols(col = \"red\", size = 0.5)\nmy_map\n```\n\n::: {.cell-output-display}\n![](06_coordinate_system_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmy.file.name <- paste0(\"outputs/6_2_10.png\") \ntmap_save(my_map, filename = my.file.name,  width = 5.75, dpi = 600)\n```\n:::\n\n\n### 국가 그리드\n\n#### 미국의 SPCS83\n\n![](images/clipboard-1909351142.png)\n\n![https://gisgeography.com/state-plane-coordinate-system-spcs/](images/clipboard-673631514.png)\n\n#### 일본의 TM 좌표계\n\n![](images/clipboard-3470015781.png){fig-align=\"center\"}\n\n#### 영국의 BNG(British National Grid)\n\n![](images/clipboard-2153214845.png){fig-align=\"center\"}\n\n### CRS\n\n#### 정의\n\n#### 방식\n\n#### 주요 적용 사례\n",
    "supporting": [
      "06_coordinate_system_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}