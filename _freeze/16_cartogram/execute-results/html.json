{
  "hash": "eaae15f6e55bc987b294d2fe18629a13",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"카토그램\"\nauthor: Sang-Il Lee\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n## 기본 개념\n\n-   필수적인 패키지\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(tmap)\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(cartogram)\nlibrary(cartogramR)\nlibrary(rmapshaper)\nlibrary(rnaturalearth)\nlibrary(RColorBrewer)\n\noptions(scipen = 999)\n```\n:::\n\n\n## 다양한 카토그램\n\n### 우리나라 시군 단위 데이터\n\n#### 기본 데이터 불러오기\n\n-   기하 데이터 불러오기\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsido <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/3 Generalization/2020_2Q/SIDO_2020_2Q_GEN_0050.shp\", options = \"ENCODING=CP949\")\nsigun1 <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/3 Generalization/2020_2Q/SIGUN1_2020_2Q_GEN_0050.shp\", options = \"ENCODING=CP949\")\nsigungu1 <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/3 Generalization/2020_2Q/SIGUNGU1_2020_2Q_GEN_0050.shp\", options = \"ENCODING=CP949\")\nemd <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/3 Generalization/2020_2Q/EMD_2020_2Q_GEN_0050.shp\", options = \"ENCODING=CP949\")\nsido_polyline <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/3 Generalization/2020_2Q/SIDO_Polyline_2020_2Q_GEN_0050.shp\", options = \"ENCODING=CP949\")\nbbox_ulleung <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/3 Generalization/2020_2Q/BBOX_Ulleung_2020_2Q_GEN_0050.shp\", options = \"ENCODING=CP949\")\nbbox_seohae <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/3 Generalization/2020_2Q/BBOX_Seohae3_2020_2Q_GEN_0050.shp\", options = \"ENCODING=CP949\")\nseoul_gu <- st_read(\n  \"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2021_4Q/SEOUL_GU_2021_4Q.shp\", options = \"ENCODING=CP949\"\n  ) \nseoul_sido <- st_read(\n  \"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2021_4Q/SEOUL_SIDO_2021_4Q.shp\", options = \"ENCODING=CP949\"\n  )\n```\n:::\n\n\n-   인구 데이터\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_SDGG <- read_excel(path = \"D:/My R/Population Geography/1 Population Growth/POP_1975_2021_SDGG.xlsx\")\npop_data <- pop_SDGG |> \n  select(Code, Region, pop_2015 = `2015`, pop_2020 = `2020`) |> \n  mutate(\n    pgr = 0.2*log(pop_2020/pop_2015) * 100\n  )\n```\n:::\n\n\n-   면적 데이터\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea_data <- read_excel(path = \"D:/My R/Korea Census Data Manipulation/11 Etc/DM_AREA_2020_SDGG.xlsx\")\n```\n:::\n\n\n-   시군구1과 연결\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_sgg_data <- sigungu1 |> \n  left_join(pop_data, join_by(SGG1_CD == Code)) |> \n  left_join(\n    select(area_data, SDGG_CD, Area), join_by(SGG1_CD == SDGG_CD)\n  ) |> \n  mutate(\n    pop_den = pop_2020/(Area/1000000)\n  )\n```\n:::\n\n\n-   시군1과 연결\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_sg_data <- sigun1 |> \n  left_join(pop_data, join_by(SG1_CD == Code)) |> \n  left_join(\n    select(area_data, SDGG_CD, Area), join_by(SG1_CD == SDGG_CD)\n  ) |> \n  mutate(\n    pop_den = pop_2020/(Area/1000000)\n  )\n```\n:::\n\n\n#### 카토그램 만들기\n\n-   카토그램 생성\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncarto_sg <- cartogramR(my_sg_data, count = \"pop_2020\") |> \n  as.sf() |> \n  st_make_valid()\n```\n:::\n\n\n-   시도 내부 라인 생성\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncarto_sg_sd <- carto_sg |> \n  summarize(\n    geometry = st_union(geometry),\n    SD_NM = first(SD_NM), \n    Eng_NM = first(Eng_NM),\n    Chn_NM = first(Chn_NM),\n    pop_2015 = sum(pop_2015),\n    pop_2020 = sum(pop_2020), \n    Area = sum(Area),\n    .by = SD_CD\n  )\ncarto_sg_sd_polyline <- ms_innerlines(carto_sg_sd)\n```\n:::\n\n\n-   지도 제작\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(carto_sg) +\n  tm_polygons(col = \"SD_CD\", style = \"cat\", \n              palette = \"Set2\", legend.show = FALSE) +\n  tm_shape(carto_sg_sd_polyline) + \n  tm_lines(col = \"black\", lwd = 1.5) +\n  tm_scale_bar(breaks = seq(0, 200, 50), text.size = 0.4, color.dark = \"gray60\", position = c(0.53, 0.01)) +\n  tm_credits(\"SANG-IL LEE, Geography Education at SNU, 2024\", size = 0.8, position = c(0.025, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](16_cartogram_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n-   저장\n\n\n::: {.cell}\n\n:::\n\n\n#### 이변량 카토그램 만들기\n\n-   지도 제작\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(carto_sg) +\n  tm_polygons(col = \"pgr\", style = \"fixed\", \n              palette = \"-RdBu\", midpoint = 0, \n              breaks = c(-Inf, -2, -1, 0, 1, 2, Inf),\n              labels = c(\"< -2\", \"-2 ~ -1\", \"-1 ~ 0\", \"0 ~ 1\", \"1 ~ 2\", \">= 2\"),\n              title = \"PGR (2015~2020, %)\") +\n  tm_shape(carto_sg_sd_polyline) + \n  tm_lines(col = \"black\", lwd = 1.5) +\n  tm_legend(\n    legend.title.size = 1.5,\n    legend.text.size = 1,\n    legend.position = c(0.7, 0.1)\n  ) +\n  tm_scale_bar(breaks = seq(0, 200, 50), text.size = 0.4, color.dark = \"gray60\", position = c(0.53, 0.01)) +\n  tm_credits(\"SANG-IL LEE, Geography Education at SNU, 2024\", size = 0.8, position = c(0.025, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](16_cartogram_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n-   저장\n\n\n::: {.cell}\n\n:::\n\n\n### 전 세계 국가 데이터\n\n#### 기본 데이터 불러오기\n\n-   기하 데이터\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries_m <- st_read(\"D:/My R/World Data Manupulation/NaturalEarth/new_2_ne_50m_admin_0_countries.shp\") \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntiny_m <- ne_download(scale = \"medium\", type = \"tiny_countries\", category = \"cultural\", returnclass = \"sf\")\ngrat_bb_m <- ne_download(scale = \"medium\", type = \"wgs84_bounding_box\", category = \"physical\", returnclass = \"sf\")\ngrat_10_m <- ne_download(scale = \"medium\", type = \"graticules_10\", category = \"physical\", returnclass = \"sf\")\ngrat_30_m <- ne_download(scale = \"medium\", type = \"graticules_30\", category = \"physical\", returnclass = \"sf\")\n\ntiny_m <- tiny_m |> \n  mutate(\n    ISO_N3_CD = as.numeric(ISO_N3)\n  )\n```\n:::\n\n\n-   속성 데이터\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwpp_2022 <- read_rds(\"wpp_2022.rds\")\nwpp_pop <- wpp_2022 |> \n  select(region_name, location_code, type, year, pop_jul_total) |> \n  filter(type == \"Country/Area\", year %in% c(1950, 1990, 2000, 2024, 2050, 2075, 2100)) |> \n  pivot_wider(\n    id_cols = c(region_name, location_code, type), \n    names_from = year,\n    values_from = pop_jul_total\n  ) |> \n  rename(\n    y1950 = `1950`,\n    y1990 = `1990`,\n    y2000 = `2000`,\n    y2024 = `2024`,\n    y2050 = `2050`,\n    y2075 = `2075`,\n    y2100 = `2100`\n  )\n```\n:::\n\n\n#### 데이터 정리하기\n\n-   세계지역 정보 불러오기\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld_region_code <- read_excel(\"D:/My R/Population Geography/0 Population Data/World_Region_Code.xlsx\", sheet = 1, col_names = TRUE)\n```\n:::\n\n\n-   기하 데이터에 결합하기\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries_m_new <- countries_m |> \n  left_join(world_region_code |> select(c(3:12, 16)), join_by(ISO_N3_CD == `M49 Code`))\n```\n:::\n\n\n-   속성 데이터 결합하기\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_world <- countries_m_new |> \n  left_join(wpp_pop, join_by(ISO_N3_CD == location_code))\nnew_tiny <- tiny_m |> \n  left_join(wpp_pop, join_by(ISO_N3_CD == location_code))\n```\n:::\n\n\n#### 카토그램 제작하기\n\n-   투영법 지정하기\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrs_robin <- st_crs(\"+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84=0,0,0\")\nnew_world_robin <- st_transform(new_world, crs = crs_robin)\nnew_tiny_robin <- st_transform(new_tiny, crs = crs_robin)\n```\n:::\n\n\n-   NA 없애기\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_world_robin <- new_world_robin |> \n  drop_na(y2024)\n```\n:::\n\n\n-   카토그램 생성\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncarto_world <- cartogramR(new_world_robin, count = \"y2024\") |> \n  as.sf() |> \n  st_make_valid()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWARNING criterion: 23.984548 > Objective: 0.010000\n Increase maxit or decrease Objective\n```\n\n\n:::\n\n```{.r .cell-code}\nqtm(carto_world)\n```\n\n::: {.cell-output-display}\n![](16_cartogram_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n-   SDG Region Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSDG.region.name <- carto_world |> \n  pull(New_SDG_NM) |> \n  unique() |> \n  _[c(5, 3, 1, 8, 6, 7, 4, 2)]\n  \ncarto_world <- carto_world |> \n  mutate(\n    New_SDG_NM = fct(New_SDG_NM, levels = SDG.region.name)\n  )\n```\n:::\n\n\n-   지도 그리기\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(carto_world) + \n  tm_polygons(col = \"New_SDG_NM\", palette = \"Set3\", legend.show = TRUE, lwd = 1.5, title = \"SDG Regions\") +\n  tm_legend(\n    legend.title.size = 1.6, \n    legend.text.size = 1.2, \n    legend.position = c(\"left\", \"bottom\"), legend.frame = FALSE) +\n  tm_layout(main.title = \"World Population Distribution, 2024\", main.title.size = 2.5) +\n  tm_credits(\"SANG-IL LEE, Geography Education at SNU, 2024\", size = 1, position = c(0.84, 0.01))\n\nmy_map\n```\n\n::: {.cell-output-display}\n![](16_cartogram_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n-   저장\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "16_cartogram_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}